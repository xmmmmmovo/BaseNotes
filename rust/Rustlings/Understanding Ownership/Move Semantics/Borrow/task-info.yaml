type: edu
files:
- name: Cargo.toml
  visible: false
  text: |
    [package]
    name = "borrow"
    version = "0.1.0"
    edition = "2018"
  learner_created: false
- name: src/main.rs
  visible: true
  placeholders:
  - offset: 83
    length: 48
    placeholder_text: /*you could replace vec0 with another variable*/
    initial_state:
      length: 48
      offset: 83
    initialized_from_dependency: false
    possible_answer: let vec_aux = vec0.clone();
    selected: false
    status: Unchecked
  - offset: 161
    length: 25
    placeholder_text: vec_0 /*and put it here*/
    initial_state:
      length: 25
      offset: 161
    initialized_from_dependency: false
    possible_answer: vec_aux
    selected: false
    status: Unchecked
  - offset: 417
    length: 58
    placeholder_text: /*if you gonna modify the argument, it should be mutable*/
    initial_state:
      length: 58
      offset: 417
    initialized_from_dependency: false
    possible_answer: 'mut '
    selected: false
    status: Unchecked
  - offset: 490
    length: 72
    placeholder_text: -> Vec<i32> /*if you are not returning a value, here should
      be no type*/
    initial_state:
      length: 72
      offset: 490
    initialized_from_dependency: false
    possible_answer: -> Vec<i32>
    selected: false
    status: Unchecked
  - offset: 569
    length: 30
    placeholder_text: /*you could borrow vec value*/
    initial_state:
      length: 30
      offset: 569
    initialized_from_dependency: false
    possible_answer: //let mut vec =vec.borrow();
    selected: false
    status: Unchecked
  - offset: 660
    length: 55
    placeholder_text: vec /*and then you don't have to return anything here*/
    initial_state:
      length: 55
      offset: 660
    initialized_from_dependency: false
    possible_answer: return vec
    selected: false
    status: Unchecked
  text: |
    use std::borrow::{Borrow, BorrowMut};

    fn main() {
        let vec0 = Vec::new();

        /*you could replace vec0 with another variable*/

        let mut vec1 = fill_vec(vec_0 /*and put it here*/);

        // Do not change the following line!
        println!("{} has length {} content `{:?}`", "vec0", vec0.len(), vec0);

        vec1.push(88);

        println!("{} has length {} content `{:?}`", "vec1", vec1.len(), vec1);
    }

    fn fill_vec(/*if you gonna modify the argument, it should be mutable*/vec: Vec<i32>) -> Vec<i32> /*if you are not returning a value, here should be no type*/ {
        /*you could borrow vec value*/

        vec.push(22);
        vec.push(44);
        vec.push(66);

        vec /*and then you don't have to return anything here*/
    }
  learner_created: false
- name: tests/tests.rs
  visible: false
  text: |+
    #[test]
    fn if_compiles() {
        //Mocking test to run only the compiler's checker
        assert!(true);
    }






  learner_created: false
status: Unchecked
record: -1
