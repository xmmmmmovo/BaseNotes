type: edu
files:
- name: Cargo.toml
  visible: false
  text: |-
    [package]
    name = "without_arguments"
    version = "0.1.0"
    edition = "2018"

    [dependencies]
    escargot = "0.5"
  learner_created: false
- name: src/main.rs
  visible: true
  placeholders:
  - offset: 16
    length: 22
    placeholder_text: let vec0 = Vec::new();
    initial_state:
      length: 22
      offset: 16
    initialized_from_dependency: false
    possible_answer: //This line should be deleted
    selected: false
    status: Unchecked
  - offset: 68
    length: 4
    placeholder_text: vec0
    initial_state:
      length: 4
      offset: 68
    initialized_from_dependency: false
    possible_answer: /*this argument should be deleted*/
    selected: false
    status: Unchecked
  - offset: 341
    length: 39
    placeholder_text: //The vector declaration should be here
    initial_state:
      length: 39
      offset: 341
    initialized_from_dependency: false
    possible_answer: let vec0 = Vec::new();
    selected: false
    status: Unchecked
  - offset: 400
    length: 40
    placeholder_text: vec /*assign the created variable here*/
    initial_state:
      length: 40
      offset: 400
    initialized_from_dependency: false
    possible_answer: vec0
    selected: false
    status: Unchecked
  text: |
    fn main() {
        let vec0 = Vec::new();

        let mut vec1 = fill_vec(vec0);

        println!("{} has length {} content `{:?}`", "vec1", vec1.len(), vec1);

        vec1.push(88);

        println!("{} has length {} content `{:?}`", "vec1", vec1.len(), vec1);
    }

    // `fill_vec()` no longer take `vec: Vec<i32>` as argument
    fn fill_vec() -> Vec<i32> {
        //The vector declaration should be here

        let mut vec = vec /*assign the created variable here*/;

        vec.push(22);
        vec.push(44);
        vec.push(66);

        vec
    }
  learner_created: false
- name: tests/tests.rs
  visible: false
  text: |+
    #[test]
    fn prints_the_vector_from_fill_vec() {
        //TODO: here are even two unwraps in a row, that's dangerous
        let actual = escargot::CargoBuild::new()
            .bin("without_arguments")
            .run()
            .unwrap()
            .command()
            .output()
            .unwrap()
            .stdout;
        //TODO: recover from an incorrect output
        let actual_as_string = std::str::from_utf8(&actual).unwrap();
        let expected_first_line  = "vec1 has length 3 content `[22, 44, 66]`\n";
        let expected_second_line = "vec1 has length 4 content `[22, 44, 66, 88]`\n";
        assert!(actual_as_string.contains(expected_first_line), "The output is missing the line with information about vec1 before pushing the new element");
        assert!(actual_as_string.contains(expected_second_line), "The output is missing the line with information about vec1 after pushing the new element");
    }





  learner_created: false
status: Unchecked
record: -1
