type: edu
files:
- name: Cargo.toml
  visible: false
  text: |-
    [package]
    name = "threads"
    version = "0.1.0"
    edition = "2018"

    [dependencies]
    escargot = "0.5"
  learner_created: false
- name: src/main.rs
  visible: true
  placeholders:
  - offset: 157
    length: 50
    placeholder_text: 'JobStatus { jobs_completed: 0 }/*try using Mutex*/'
    initial_state:
      length: 50
      offset: 157
    initialized_from_dependency: false
    possible_answer: 'Mutex::new(JobStatus { jobs_completed: 0 })'
    selected: false
    status: Unchecked
  - offset: 384
    length: 72
    placeholder_text: /*you probably would like to lock the value modified in another
      thread*/
    initial_state:
      length: 72
      offset: 384
    initialized_from_dependency: false
    possible_answer: lock().unwrap().
    selected: false
    status: Unchecked
  - offset: 512
    length: 41
    placeholder_text: /*you should lock the status value here*/
    initial_state:
      length: 41
      offset: 512
    initialized_from_dependency: false
    possible_answer: lock().unwrap().
    selected: false
    status: Unchecked
  text: |
    use std::sync::{Arc, Mutex};
    use std::thread;
    use std::time::Duration;

    struct JobStatus {
        jobs_completed: u32,
    }

    fn main() {
        let status = Arc::new(JobStatus { jobs_completed: 0 }/*try using Mutex*/);
        let status_shared = status.clone();
        thread::spawn(move || {
            for _ in 0..10 {
                thread::sleep(Duration::from_millis(250));
                status_shared./*you probably would like to lock the value modified in another thread*/jobs_completed += 1;
            }
        });
        while status./*you should lock the status value here*/jobs_completed < 10 {
            println!("waiting... ");
            thread::sleep(Duration::from_millis(500));
        }
    }
  learner_created: false
- name: tests/tests.rs
  visible: false
  text: |+
    use std::{thread};
    use std::thread::Thread;
    use std::time::Duration;
    use std::process::Stdio;
    use std::io::{BufReader, BufRead};

    #[test]
    fn prints_the_vector_from_fill_vec() {
        //TODO: here are even two unwraps in a row, that's dangerous
        let actual_command = escargot::CargoBuild::new()
            .bin("threads")
            .run()
            .unwrap()
            .command()
            .stdout(Stdio::piped())
            .spawn();

        let mut actual = match actual_command {
            //TODO: Change the message
            Err(why) => panic!("couldn't start main.rs: {}", why),
            Ok(process) => process,
        };

        //Act
        //Creating the buffer
        let mut actual_stdout = BufReader::new(actual.stdout.unwrap());
        thread::sleep(Duration::from_millis(3000));
        let mut actual_as_string = String::new();
        let expected_waiting  = "waiting... ";
        let mut lines_read = 0;
        loop {
            if lines_read == 6 {break}
            actual_stdout.read_line(&mut actual_as_string);
            assert!(actual_as_string.contains(expected_waiting), "There were insufficient threads spawned");
            lines_read += 1;
        }
    }





  learner_created: false
status: Unchecked
record: -1
