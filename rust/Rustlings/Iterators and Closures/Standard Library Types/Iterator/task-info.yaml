type: edu
files:
- name: Cargo.toml
  visible: false
  text: |
    [package]
    name = "iterator3"
    version = "0.1.0"
    edition = "2018"
  learner_created: false
- name: src/lib.rs
  visible: true
  placeholders:
  - offset: 427
    length: 31
    placeholder_text: /*implement the function here*/
    initial_state:
      length: 31
      offset: 427
    initialized_from_dependency: false
    possible_answer: |-
      if b == 0 {
              Err(DivisionError::DivideByZero)
          }
          else if a % b == 0 {
              Ok(a/b)
          }
          else {
              Err(DivisionError::NotDivisible(NotDivisibleError{ dividend: a, divisor: b }))
          }
    selected: false
    status: Unchecked
  - offset: 740
    length: 43
    placeholder_text: //fill in the correct expression for x here
    initial_state:
      length: 43
      offset: 740
    initialized_from_dependency: false
    possible_answer: division_results.collect::<Result<Vec<_>, _>>();
    selected: false
    status: Unchecked
  - offset: 1032
    length: 43
    placeholder_text: //fill in the correct expression for x here
    initial_state:
      length: 43
      offset: 1032
    initialized_from_dependency: false
    possible_answer: division_results.collect::<Vec<Result<i32, _>>>();
    selected: false
    status: Unchecked
  text: |-
    #[derive(Debug, PartialEq, Eq)]
    pub enum DivisionError {
        NotDivisible(NotDivisibleError),
        DivideByZero,
    }

    #[derive(Debug, PartialEq, Eq)]
    pub struct NotDivisibleError {
        pub dividend: i32,
        pub divisor: i32,
    }

    // This function should calculate `a` divided by `b` if `a` is evenly divisible by b.
    // Otherwise, it should return a suitable error.
    pub fn divide(a: i32, b: i32) -> Result<i32, DivisionError> {
        /*implement the function here*/
    }

    #[cfg(test)]
    mod tests {
        use super::*;

        // Iterator exercises using your `divide` function

        #[test]
        fn result_with_list() {
            let numbers = vec![27, 297, 38502, 81];
            let division_results = numbers.into_iter().map(|n| divide(n, 27));
            let x= //fill in the correct expression for x here
            assert_eq!(format!("{:?}", x), "Ok([1, 11, 1426, 3])");
        }
        #[test]
        fn list_of_results() {
            let numbers = vec![27, 297, 38502, 81];
            let division_results = numbers.into_iter().map(|n| divide(n, 27));
            let x = //fill in the correct expression for x here
            assert_eq!(format!("{:?}", x), "[Ok(1), Ok(11), Ok(1426), Ok(3)]");
        }
    }
  learner_created: false
- name: tests/tests.rs
  visible: false
  text: |
    use iterator3::{divide, DivisionError, NotDivisibleError};

    #[test]
    fn test_success() {
        assert_eq!(divide(81, 9), Ok(9));
    }

    #[test]
    fn test_not_divisible() {
        assert_eq!(
            divide(81, 6),
            Err(DivisionError::NotDivisible(NotDivisibleError {
                dividend: 81,
                divisor: 6
            }))
        );
    }

    #[test]
    fn test_divide_by_0() {
        assert_eq!(divide(81, 0), Err(DivisionError::DivideByZero));
    }

    #[test]
    fn test_divide_0_by_something() {
        assert_eq!(divide(0, 81), Ok(0));
    }
  learner_created: false
status: Unchecked
record: -1
