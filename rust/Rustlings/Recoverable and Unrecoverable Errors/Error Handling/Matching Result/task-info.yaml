type: edu
files:
- name: Cargo.toml
  visible: false
  text: |
    [package]
    name = "matching_result"
    version = "0.1.0"
    edition = "2018"
  learner_created: false
- name: src/lib.rs
  visible: true
  placeholders:
  - offset: 198
    length: 73
    placeholder_text: /*this is the short way, but you can just match the result of
      the parse*/
    initial_state:
      length: 73
      offset: 198
    initialized_from_dependency: false
    possible_answer: '?'
    selected: false
    status: Unchecked
  text: |
    use std::num::ParseIntError;

    pub fn total_cost(item_quantity: &str) -> Result<i32, ParseIntError> {
        let processing_fee = 1;
        let cost_per_item = 5;
        let qty = item_quantity.parse::<i32>()/*this is the short way, but you can just match the result of the parse*/;

        Ok(qty * cost_per_item + processing_fee)
    }
  learner_created: false
- name: tests/tests.rs
  visible: false
  text: |
    use matching_result::total_cost;

    #[test]
    fn item_quantity_is_a_valid_number() {
        assert_eq!(total_cost("34"), Ok(171));
    }

    #[test]
    fn item_quantity_is_an_invalid_number() {
        assert_eq!(
            total_cost("beep boop").unwrap_err().to_string(),
            "invalid digit found in string"
        );
    }
  learner_created: false
status: Unchecked
record: -1
