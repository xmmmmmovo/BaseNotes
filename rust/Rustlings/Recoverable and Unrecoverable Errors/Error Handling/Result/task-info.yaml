type: edu
files:
- name: Cargo.toml
  visible: false
  text: |
    [package]
    name = "result1"
    version = "0.1.0"
    edition = "2018"
  learner_created: false
- name: src/lib.rs
  visible: true
  placeholders:
  - offset: 290
    length: 71
    placeholder_text: /*here could be the expression to compare if the value is appropriate*/
    initial_state:
      length: 71
      offset: 290
    initialized_from_dependency: false
    possible_answer: if value > 0 {
    selected: false
    status: Unchecked
  - offset: 423
    length: 51
    placeholder_text: /*here could be the othere arms of the comparison*/
    initial_state:
      length: 51
      offset: 423
    initialized_from_dependency: false
    possible_answer: |-
      }
              else if value < 0 {
                  Err(CreationError::Negative)
              }
              else {
                  Err(CreationError::Zero)
              }
    selected: false
    status: Unchecked
  text: |
    use std::cmp::Ordering;

    #[derive(PartialEq, Debug)]
    pub struct PositiveNonzeroInteger(u64);

    #[derive(PartialEq, Debug)]
    pub enum CreationError {
        Negative,
        Zero,
    }

    impl PositiveNonzeroInteger {
        pub fn new(value: i64) -> Result<PositiveNonzeroInteger, CreationError> {
            /*here could be the expression to compare if the value is appropriate*/
                Ok(PositiveNonzeroInteger(value as u64))
            /*here could be the othere arms of the comparison*/
        }
    }
  learner_created: false
- name: tests/tests.rs
  visible: false
  text: |
    use result1::{CreationError, PositiveNonzeroInteger};

    #[test]
    fn test_creation() {
        assert!(PositiveNonzeroInteger::new(10).is_ok());
        assert_eq!(
            Err(CreationError::Negative),
            PositiveNonzeroInteger::new(-10)
        );
        assert_eq!(Err(CreationError::Zero), PositiveNonzeroInteger::new(0));
    }
  learner_created: false
status: Unchecked
record: -1
