type: edu
files:
- name: Cargo.toml
  visible: false
  text: |
    [package]
    name = "errorsn"
    version = "0.1.0"
    edition = "2018"
  learner_created: false
- name: src/lib.rs
  visible: true
  placeholders:
  - offset: 187
    length: 3
    placeholder_text: ???
    initial_state:
      length: 3
      offset: 187
    initialized_from_dependency: false
    possible_answer: Box<error::Error>
    selected: false
    status: Unchecked
  - offset: 254
    length: 33
    placeholder_text: /*something could go wrong here*/
    initial_state:
      length: 33
      offset: 254
    initialized_from_dependency: false
    possible_answer: '?'
    selected: false
    status: Unchecked
  - offset: 327
    length: 33
    placeholder_text: /*something could go wrong here*/
    initial_state:
      length: 33
      offset: 327
    initialized_from_dependency: false
    possible_answer: '?'
    selected: false
    status: Unchecked
  - offset: 411
    length: 33
    placeholder_text: /*something could go wrong here*/
    initial_state:
      length: 33
      offset: 411
    initialized_from_dependency: false
    possible_answer: '?'
    selected: false
    status: Unchecked
  text: |-
    use std::error;
    use std::fmt;
    use std::io;

    // PositiveNonzeroInteger is a struct defined below the tests.
    pub fn read_and_validate(b: &mut io::BufRead) -> Result<PositiveNonzeroInteger, ???> {
        let mut line = String::new();
        b.read_line(&mut line)/*something could go wrong here*/;
        let num: i64 = line.trim().parse()/*something could go wrong here*/;
        let answer = PositiveNonzeroInteger::new(num)/*something could go wrong here*/;
        Ok(answer)
    }

    // This is a test helper function that turns a &str into a BufReader.
    pub fn test_with_str(s: &str) -> Result<PositiveNonzeroInteger, Box<error::Error>> {
        let mut b = io::BufReader::new(s.as_bytes());
        read_and_validate(&mut b)
    }

    #[derive(PartialEq, Debug)]
    pub struct PositiveNonzeroInteger(u64);

    impl PositiveNonzeroInteger {
        pub fn new(value: i64) -> Result<PositiveNonzeroInteger, CreationError> {
            if value == 0 {
                Err(CreationError::Zero)
            } else if value < 0 {
                Err(CreationError::Negative)
            } else {
                Ok(PositiveNonzeroInteger(value as u64))
            }
        }
    }

    #[derive(PartialEq, Debug)]
    pub enum CreationError {
        Negative,
        Zero,
    }

    impl fmt::Display for CreationError {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            f.write_str((self as &error::Error).description())
        }
    }

    impl error::Error for CreationError {
        fn description(&self) -> &str {
            match *self {
                CreationError::Negative => "Negative",
                CreationError::Zero => "Zero",
            }
        }
    }
  learner_created: false
- name: tests/tests.rs
  visible: false
  text: |
    use errorsn::{read_and_validate, test_with_str, CreationError, PositiveNonzeroInteger};
    use std::error;
    use std::io;

    #[test]
    fn test_success() {
        let x = test_with_str("42\n");
        assert_eq!(PositiveNonzeroInteger::new(42), Ok(x.unwrap()));
    }

    #[test]
    fn test_not_num() {
        let x = test_with_str("eleven billion\n");
        assert!(x.is_err());
    }

    #[test]
    fn test_non_positive() {
        let x = test_with_str("-40\n");
        assert!(x.is_err());
    }

    #[test]
    fn test_ioerror() {
        struct Broken;
        impl io::Read for Broken {
            fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> {
                Err(io::Error::new(io::ErrorKind::BrokenPipe, "uh-oh!"))
            }
        }
        let mut b = io::BufReader::new(Broken);
        assert!(read_and_validate(&mut b).is_err());
        assert_eq!("uh-oh!", read_and_validate(&mut b).unwrap_err().to_string());
    }

    #[test]
    fn test_positive_nonzero_integer_creation() {
        assert!(PositiveNonzeroInteger::new(10).is_ok());
        assert_eq!(
            Err(CreationError::Negative),
            PositiveNonzeroInteger::new(-10)
        );
        assert_eq!(Err(CreationError::Zero), PositiveNonzeroInteger::new(0));
    }
  learner_created: false
status: Unchecked
record: -1
