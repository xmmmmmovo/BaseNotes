type: edu
files:
- name: Cargo.toml
  visible: false
  text: |-
    [package]
    name = "mutable"
    version = "0.1.0"
    edition = "2018"

    [dependencies]
    escargot = "0.5"
  learner_created: false
- name: src/main.rs
  visible: true
  placeholders:
  - offset: 48
    length: 37
    placeholder_text: /*insert the necessary keyword here*/
    initial_state:
      length: 37
      offset: 48
    initialized_from_dependency: false
    possible_answer: mut
    selected: false
    status: Unchecked
  text: |
    fn main() {
        let vec0 = Vec::new();

        let /*insert the necessary keyword here*/ vec1 = fill_vec(vec0);

        println!("{} has length {} content `{:?}`", "vec1", vec1.len(), vec1);

        vec1.push(88);

        println!("{} has length {} content `{:?}`", "vec1", vec1.len(), vec1);
    }

    fn fill_vec(vec: Vec<i32>) -> Vec<i32> {
        let mut vec = vec;

        vec.push(22);
        vec.push(44);
        vec.push(66);

        vec
    }
  learner_created: false
- name: tests/tests.rs
  visible: false
  text: |+
    #[test]
    fn prints_the_vector_from_fill_vec() {
        //TODO: here are even two unwraps in a row, that's dangerous
        let actual = escargot::CargoBuild::new()
            .bin("mutable")
            .run()
            .unwrap()
            .command()
            .output()
            .unwrap()
            .stdout;
        //TODO: recover from an incorrect output
        let actual_as_string = std::str::from_utf8(&actual).unwrap();
        let expected_first_line  = "vec1 has length 3 content `[22, 44, 66]`\n";
        let expected_second_line = "vec1 has length 4 content `[22, 44, 66, 88]`\n";
        assert!(actual_as_string.contains(expected_first_line), "The output is missing the line with information about vec1 before pushing the new element");
        assert!(actual_as_string.contains(expected_second_line), "The output is missing the line with information about vec1 after pushing the new element");
    }



  learner_created: false
status: Unchecked
record: -1
