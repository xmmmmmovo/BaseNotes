type: edu
files:
- name: src/main.rs
  visible: true
  placeholders:
  - offset: 16
    length: 33
    placeholder_text: // put you code here to launch it
    initial_state:
      length: 33
      offset: 16
    initialized_from_dependency: false
    possible_answer: println!("Hello, world!");
    selected: false
    status: Unchecked
  text: |
    fn main() {
        // put you code here to launch it
    }
  learner_created: false
- name: Cargo.toml
  visible: false
  text: |-
    [package]
    name = "hello_world"
    version = "0.1.0"
    edition = "2018"

    [dependencies]
    escargot = "0.5"
  learner_created: false
- name: tests/tests.rs
  visible: false
  text: |+
    extern crate escargot;

    use std::panic::{PanicInfo};
    use std::fmt;

    #[test]
    fn prints_hello_world_and_starts_new_line() {
        //TODO: here are even two unwraps in a row, that's dangerous
        let actual = escargot::CargoBuild::new()
            .bin("hello_world")
            .run()
            .unwrap()
            .command()
            .output()
            .unwrap()
            .stdout;
        //TODO: recover from an incorrect output
        let actual_as_string = std::str::from_utf8(&actual).unwrap();
        let expected  = "Hello, world!\n";
        let err_print_expected = "Hello, world!";
        assert_ne!(actual_as_string, err_print_expected, "Note, that you should use println! macro, not print!");
        assert_eq!(actual_as_string, expected, "The output was incorrect:");
    }






  learner_created: false
status: Unchecked
record: -1
