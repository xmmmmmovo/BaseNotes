type: edu
files:
- name: Cargo.toml
  visible: false
  text: |-
    [package]
    name = "option"
    version = "0.1.0"
    edition = "2018"

    [dependencies]
    escargot = "0.5"
  learner_created: false
- name: src/main.rs
  visible: true
  placeholders:
  - offset: 170
    length: 45
    placeholder_text: .unwrap()/*return 3 even if the pop panicks*/
    initial_state:
      length: 45
      offset: 170
    initialized_from_dependency: false
    possible_answer: .unwrap_or(3)
    selected: false
    status: Unchecked
  text: |
    fn main() {
        let mut list = vec![3];

        let last = list.pop().unwrap();
        println!("The last item in the list is {:?}", last);

        let second_to_last = list.pop().unwrap()/*return 3 even if the pop panicks*/;
        println!(
            "The second-to-last item in the list is {:?}",
            second_to_last
        );
    }
  learner_created: false
- name: tests/tests.rs
  visible: false
  text: |+
    #[test]
    fn prints_the_vector_from_fill_vec() {
        //TODO: here are even two unwraps in a row, that's dangerous
        let actual = escargot::CargoBuild::new()
            .bin("option")
            .run()
            .unwrap()
            .command()
            .output()
            .unwrap()
            .stdout;
        //TODO: recover from an incorrect output
        let actual_as_string = std::str::from_utf8(&actual).unwrap();
        let expected_first_line  = "The last item in the list is 3\n";
        let expected_second_line = "The second-to-last item in the list is 3\n";
        assert!(actual_as_string.contains(expected_first_line), "The output is missing the last element of the vec");
        assert!(actual_as_string.contains(expected_second_line), "The output is missing the second-to-last element. Seems like there was a panic!");
    }





  learner_created: false
status: Unchecked
record: -1
